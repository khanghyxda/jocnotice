#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jocnode:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
console.log(port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var redis = require('redis');
//var client = redis.createClient("redis://localhost:6379");
var client = redis.createClient("redis://h:p21e9479e878e516f445132bf853765ca6ed2277f291b7600c88f86ec5d8d9371@ec2-54-236-162-33.compute-1.amazonaws.com:60629");

client.flushdb(function (err, succeeded) {
  console.log(succeeded); // will be true if successfull
});

io.on('connection', function (socket) {
  const socketId = socket.id;
  console.log('Socket Connected: ' + socketId)
  socket.on('disconnect', function () {
      client.hget("socketUser", socketId, function (err, replies) {
          if(replies != null && replies.length > 0) {
              var userId = replies[0];
              client.hdel("socketUser", socketId, redis.print);
              client.srem(userId, socketId);
              client.smembers(userId, function (err, replies) {
                  if (replies != null && replies.length == 0) {
                      client.del(userId);
                  }
              })
          }
      });
  });

  socket.on('connectInfo', function (userId) {
      client.hset("socketUser", socketId, userId, redis.print);
      client.sadd(userId, socketId, redis.print);
  });

  socket.on("notification", function (listUserId) {
      listUserId.forEach(userId => {
          client.smembers(userId, function (err, replies) {
              var listSocketId = replies;
              listSocketId.forEach(function(id){
                  socket.to(id).emit("notification");
              })
          })
      });
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
